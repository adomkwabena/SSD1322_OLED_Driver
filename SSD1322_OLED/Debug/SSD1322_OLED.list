
SSD1322_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002700  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000589c  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008124  08008124  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008124  08008124  00018124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800812c  0800812c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008130  08008130  00018130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  080081a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080081a4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b76  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a3e  00000000  00000000  00028c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002a658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e8  00000000  00000000  0002ae68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020902  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086d8  00000000  00000000  0004be52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1d54  00000000  00000000  0005452a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011627e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  001162fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002870 	.word	0x08002870

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002870 	.word	0x08002870

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f90d 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 f822 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f917 	bl	800075e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f8ed 	bl	8000726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	2000009c 	.word	0x2000009c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000009c 	.word	0x2000009c

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff8e 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff47 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000738:	f7ff ff5c 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 800073c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff8e 	bl	8000664 <NVIC_EncodePriority>
 8000748:	4602      	mov	r2, r0
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff5d 	bl	8000610 <__NVIC_SetPriority>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffb0 	bl	80006cc <SysTick_Config>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e16b      	b.n	8000a6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000794:	2201      	movs	r2, #1
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 815a 	bne.w	8000a66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x4a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d123      	bne.n	800080a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	08da      	lsrs	r2, r3, #3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3208      	adds	r2, #8
 80007ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	220f      	movs	r2, #15
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	691a      	ldr	r2, [r3, #16]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	08da      	lsrs	r2, r3, #3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3208      	adds	r2, #8
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0203 	and.w	r2, r3, #3
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00b      	beq.n	800085e <HAL_GPIO_Init+0xe6>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	2b11      	cmp	r3, #17
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d130      	bne.n	80008c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 0201 	and.w	r2, r3, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80b4 	beq.w	8000a66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a5e      	ldr	r2, [pc, #376]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800091a:	4a5a      	ldr	r2, [pc, #360]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3302      	adds	r3, #2
 8000922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	220f      	movs	r2, #15
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4013      	ands	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <HAL_GPIO_Init+0x310>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d02b      	beq.n	800099e <HAL_GPIO_Init+0x226>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <HAL_GPIO_Init+0x314>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d025      	beq.n	800099a <HAL_GPIO_Init+0x222>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <HAL_GPIO_Init+0x318>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01f      	beq.n	8000996 <HAL_GPIO_Init+0x21e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4e      	ldr	r2, [pc, #312]	; (8000a94 <HAL_GPIO_Init+0x31c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d019      	beq.n	8000992 <HAL_GPIO_Init+0x21a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a4d      	ldr	r2, [pc, #308]	; (8000a98 <HAL_GPIO_Init+0x320>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0x216>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <HAL_GPIO_Init+0x324>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00d      	beq.n	800098a <HAL_GPIO_Init+0x212>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <HAL_GPIO_Init+0x328>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d007      	beq.n	8000986 <HAL_GPIO_Init+0x20e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4a      	ldr	r2, [pc, #296]	; (8000aa4 <HAL_GPIO_Init+0x32c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_GPIO_Init+0x20a>
 800097e:	2307      	movs	r3, #7
 8000980:	e00e      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000982:	2308      	movs	r3, #8
 8000984:	e00c      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000986:	2306      	movs	r3, #6
 8000988:	e00a      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098a:	2305      	movs	r3, #5
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098e:	2304      	movs	r3, #4
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099e:	2300      	movs	r3, #0
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4934      	ldr	r1, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009e2:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f ae90 	bls.w	8000794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40021400 	.word	0x40021400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40021c00 	.word	0x40021c00
 8000aa8:	40013c00 	.word	0x40013c00

08000aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	619a      	str	r2, [r3, #24]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e22d      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d075      	beq.n	8000bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d00c      	beq.n	8000b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b0a:	4ba0      	ldr	r3, [pc, #640]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d112      	bne.n	8000b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b16:	4b9d      	ldr	r3, [pc, #628]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b22:	d10b      	bne.n	8000b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b24:	4b99      	ldr	r3, [pc, #612]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d05b      	beq.n	8000be8 <HAL_RCC_OscConfig+0x108>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d157      	bne.n	8000be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e208      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d106      	bne.n	8000b54 <HAL_RCC_OscConfig+0x74>
 8000b46:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a90      	ldr	r2, [pc, #576]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e01d      	b.n	8000b90 <HAL_RCC_OscConfig+0xb0>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b5c:	d10c      	bne.n	8000b78 <HAL_RCC_OscConfig+0x98>
 8000b5e:	4b8b      	ldr	r3, [pc, #556]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a8a      	ldr	r2, [pc, #552]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a87      	ldr	r2, [pc, #540]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e00b      	b.n	8000b90 <HAL_RCC_OscConfig+0xb0>
 8000b78:	4b84      	ldr	r3, [pc, #528]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a83      	ldr	r2, [pc, #524]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a80      	ldr	r2, [pc, #512]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b98:	f7ff fcfc 	bl	8000594 <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba0:	f7ff fcf8 	bl	8000594 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b64      	cmp	r3, #100	; 0x64
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e1cd      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <HAL_RCC_OscConfig+0xc0>
 8000bbe:	e014      	b.n	8000bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fce8 	bl	8000594 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fce4 	bl	8000594 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e1b9      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bda:	4b6c      	ldr	r3, [pc, #432]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0xe8>
 8000be6:	e000      	b.n	8000bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d063      	beq.n	8000cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bf6:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c02:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d11c      	bne.n	8000c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d116      	bne.n	8000c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d005      	beq.n	8000c32 <HAL_RCC_OscConfig+0x152>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d001      	beq.n	8000c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e18d      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c32:	4b56      	ldr	r3, [pc, #344]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4952      	ldr	r1, [pc, #328]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	e03a      	b.n	8000cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d020      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c50:	4b4f      	ldr	r3, [pc, #316]	; (8000d90 <HAL_RCC_OscConfig+0x2b0>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c56:	f7ff fc9d 	bl	8000594 <HAL_GetTick>
 8000c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5c:	e008      	b.n	8000c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5e:	f7ff fc99 	bl	8000594 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d901      	bls.n	8000c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e16e      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c70:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f0      	beq.n	8000c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7c:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4940      	ldr	r1, [pc, #256]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
 8000c90:	e015      	b.n	8000cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_RCC_OscConfig+0x2b0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c98:	f7ff fc7c 	bl	8000594 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca0:	f7ff fc78 	bl	8000594 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e14d      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d030      	beq.n	8000d2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d016      	beq.n	8000d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <HAL_RCC_OscConfig+0x2b4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd8:	f7ff fc5c 	bl	8000594 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fc58 	bl	8000594 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e12d      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f0      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x200>
 8000cfe:	e015      	b.n	8000d2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_RCC_OscConfig+0x2b4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fc45 	bl	8000594 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fc41 	bl	8000594 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e116      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f0      	bne.n	8000d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80a0 	beq.w	8000e7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10f      	bne.n	8000d6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_RCC_OscConfig+0x2b8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d121      	bne.n	8000dba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_RCC_OscConfig+0x2b8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_RCC_OscConfig+0x2b8>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fc07 	bl	8000594 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	e011      	b.n	8000dae <HAL_RCC_OscConfig+0x2ce>
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	42470000 	.word	0x42470000
 8000d94:	42470e80 	.word	0x42470e80
 8000d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9c:	f7ff fbfa 	bl	8000594 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0cf      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	4b6a      	ldr	r3, [pc, #424]	; (8000f58 <HAL_RCC_OscConfig+0x478>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d106      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x2f0>
 8000dc2:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc6:	4a65      	ldr	r2, [pc, #404]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dce:	e01c      	b.n	8000e0a <HAL_RCC_OscConfig+0x32a>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x312>
 8000dd8:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ddc:	4a5f      	ldr	r2, [pc, #380]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6713      	str	r3, [r2, #112]	; 0x70
 8000de4:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de8:	4a5c      	ldr	r2, [pc, #368]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6713      	str	r3, [r2, #112]	; 0x70
 8000df0:	e00b      	b.n	8000e0a <HAL_RCC_OscConfig+0x32a>
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	4a59      	ldr	r2, [pc, #356]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e02:	4a56      	ldr	r2, [pc, #344]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d015      	beq.n	8000e3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e12:	f7ff fbbf 	bl	8000594 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e18:	e00a      	b.n	8000e30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fbbb 	bl	8000594 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e08e      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e30:	4b4a      	ldr	r3, [pc, #296]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0ee      	beq.n	8000e1a <HAL_RCC_OscConfig+0x33a>
 8000e3c:	e014      	b.n	8000e68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fba9 	bl	8000594 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fba5 	bl	8000594 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e078      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1ee      	bne.n	8000e46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d105      	bne.n	8000e7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d064      	beq.n	8000f4c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d05c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d141      	bne.n	8000f1a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_RCC_OscConfig+0x480>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fb7a 	bl	8000594 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea4:	f7ff fb76 	bl	8000594 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e04b      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69da      	ldr	r2, [r3, #28]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	019b      	lsls	r3, r3, #6
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	3b01      	subs	r3, #1
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	061b      	lsls	r3, r3, #24
 8000ee6:	491d      	ldr	r1, [pc, #116]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_RCC_OscConfig+0x480>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fb4f 	bl	8000594 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efa:	f7ff fb4b 	bl	8000594 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e020      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x41a>
 8000f18:	e018      	b.n	8000f4c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_RCC_OscConfig+0x480>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fb38 	bl	8000594 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f28:	f7ff fb34 	bl	8000594 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e009      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_RCC_OscConfig+0x47c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x448>
 8000f46:	e001      	b.n	8000f4c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40007000 	.word	0x40007000
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	42470060 	.word	0x42470060

08000f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e0ca      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f78:	4b67      	ldr	r3, [pc, #412]	; (8001118 <HAL_RCC_ClockConfig+0x1b4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d90c      	bls.n	8000fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f86:	4b64      	ldr	r3, [pc, #400]	; (8001118 <HAL_RCC_ClockConfig+0x1b4>)
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <HAL_RCC_ClockConfig+0x1b4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0b6      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8000fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a51      	ldr	r2, [pc, #324]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fdc:	4b4f      	ldr	r3, [pc, #316]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	494c      	ldr	r1, [pc, #304]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d044      	beq.n	8001084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d119      	bne.n	8001042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e07d      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d003      	beq.n	8001022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800101e:	2b03      	cmp	r3, #3
 8001020:	d107      	bne.n	8001032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e06d      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e065      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f023 0203 	bic.w	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4933      	ldr	r1, [pc, #204]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	4313      	orrs	r3, r2
 8001052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001054:	f7ff fa9e 	bl	8000594 <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800105a:	e00a      	b.n	8001072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105c:	f7ff fa9a 	bl	8000594 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	f241 3288 	movw	r2, #5000	; 0x1388
 800106a:	4293      	cmp	r3, r2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e04d      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 020c 	and.w	r2, r3, #12
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	429a      	cmp	r2, r3
 8001082:	d1eb      	bne.n	800105c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_RCC_ClockConfig+0x1b4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d20c      	bcs.n	80010ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_RCC_ClockConfig+0x1b4>)
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_RCC_ClockConfig+0x1b4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e030      	b.n	800110e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4915      	ldr	r1, [pc, #84]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d009      	beq.n	80010ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ea:	f000 f81d 	bl	8001128 <HAL_RCC_GetSysClockFreq>
 80010ee:	4601      	mov	r1, r0
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_RCC_ClockConfig+0x1b8>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fa00 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00
 800111c:	40023800 	.word	0x40023800
 8001120:	08008114 	.word	0x08008114
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800113e:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_GetSysClockFreq+0x158>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b04      	cmp	r3, #4
 8001148:	d007      	beq.n	800115a <HAL_RCC_GetSysClockFreq+0x32>
 800114a:	2b08      	cmp	r3, #8
 800114c:	d008      	beq.n	8001160 <HAL_RCC_GetSysClockFreq+0x38>
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 808d 	bne.w	800126e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001156:	60bb      	str	r3, [r7, #8]
       break;
 8001158:	e08c      	b.n	8001274 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800115a:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <HAL_RCC_GetSysClockFreq+0x160>)
 800115c:	60bb      	str	r3, [r7, #8]
      break;
 800115e:	e089      	b.n	8001274 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_GetSysClockFreq+0x158>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001168:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <HAL_RCC_GetSysClockFreq+0x158>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d023      	beq.n	80011be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001176:	4b42      	ldr	r3, [pc, #264]	; (8001280 <HAL_RCC_GetSysClockFreq+0x158>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	099b      	lsrs	r3, r3, #6
 800117c:	f04f 0400 	mov.w	r4, #0
 8001180:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	ea03 0501 	and.w	r5, r3, r1
 800118c:	ea04 0602 	and.w	r6, r4, r2
 8001190:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <HAL_RCC_GetSysClockFreq+0x160>)
 8001192:	fb02 f106 	mul.w	r1, r2, r6
 8001196:	2200      	movs	r2, #0
 8001198:	fb02 f205 	mul.w	r2, r2, r5
 800119c:	440a      	add	r2, r1
 800119e:	493a      	ldr	r1, [pc, #232]	; (8001288 <HAL_RCC_GetSysClockFreq+0x160>)
 80011a0:	fba5 0101 	umull	r0, r1, r5, r1
 80011a4:	1853      	adds	r3, r2, r1
 80011a6:	4619      	mov	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f04f 0400 	mov.w	r4, #0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4623      	mov	r3, r4
 80011b2:	f7ff f809 	bl	80001c8 <__aeabi_uldivmod>
 80011b6:	4603      	mov	r3, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	e049      	b.n	8001252 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_RCC_GetSysClockFreq+0x158>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	ea03 0501 	and.w	r5, r3, r1
 80011d4:	ea04 0602 	and.w	r6, r4, r2
 80011d8:	4629      	mov	r1, r5
 80011da:	4632      	mov	r2, r6
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	f04f 0400 	mov.w	r4, #0
 80011e4:	0154      	lsls	r4, r2, #5
 80011e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ea:	014b      	lsls	r3, r1, #5
 80011ec:	4619      	mov	r1, r3
 80011ee:	4622      	mov	r2, r4
 80011f0:	1b49      	subs	r1, r1, r5
 80011f2:	eb62 0206 	sbc.w	r2, r2, r6
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f04f 0400 	mov.w	r4, #0
 80011fe:	0194      	lsls	r4, r2, #6
 8001200:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001204:	018b      	lsls	r3, r1, #6
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	eb64 0402 	sbc.w	r4, r4, r2
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	00e2      	lsls	r2, r4, #3
 8001216:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800121a:	00d9      	lsls	r1, r3, #3
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	195b      	adds	r3, r3, r5
 8001222:	eb44 0406 	adc.w	r4, r4, r6
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	02a2      	lsls	r2, r4, #10
 8001230:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001234:	0299      	lsls	r1, r3, #10
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0400 	mov.w	r4, #0
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	f7fe ffbe 	bl	80001c8 <__aeabi_uldivmod>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_GetSysClockFreq+0x158>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	3301      	adds	r3, #1
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	60bb      	str	r3, [r7, #8]
      break;
 800126c:	e002      	b.n	8001274 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001270:	60bb      	str	r3, [r7, #8]
      break;
 8001272:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001274:	68bb      	ldr	r3, [r7, #8]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	00f42400 	.word	0x00f42400
 8001288:	017d7840 	.word	0x017d7840

0800128c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e056      	b.n	800134c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d106      	bne.n	80012be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f001 f8fb 	bl	80024b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2202      	movs	r2, #2
 80012c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	ea42 0103 	orr.w	r1, r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	0c1b      	lsrs	r3, r3, #16
 800131c:	f003 0104 	and.w	r1, r3, #4
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800133a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <HAL_SPI_Transmit+0x22>
 8001372:	2302      	movs	r3, #2
 8001374:	e11e      	b.n	80015b4 <HAL_SPI_Transmit+0x260>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800137e:	f7ff f909 	bl	8000594 <HAL_GetTick>
 8001382:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d002      	beq.n	800139a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001394:	2302      	movs	r3, #2
 8001396:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001398:	e103      	b.n	80015a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_SPI_Transmit+0x52>
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80013aa:	e0fa      	b.n	80015a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2203      	movs	r2, #3
 80013b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f2:	d107      	bne.n	8001404 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001402:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140e:	2b40      	cmp	r3, #64	; 0x40
 8001410:	d007      	beq.n	8001422 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800142a:	d14b      	bne.n	80014c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HAL_SPI_Transmit+0xe6>
 8001434:	8afb      	ldrh	r3, [r7, #22]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d13e      	bne.n	80014b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	881a      	ldrh	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	1c9a      	adds	r2, r3, #2
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800145e:	e02b      	b.n	80014b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d112      	bne.n	8001494 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	1c9a      	adds	r2, r3, #2
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	86da      	strh	r2, [r3, #54]	; 0x36
 8001492:	e011      	b.n	80014b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001494:	f7ff f87e 	bl	8000594 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d803      	bhi.n	80014ac <HAL_SPI_Transmit+0x158>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014aa:	d102      	bne.n	80014b2 <HAL_SPI_Transmit+0x15e>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80014b6:	e074      	b.n	80015a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ce      	bne.n	8001460 <HAL_SPI_Transmit+0x10c>
 80014c2:	e04c      	b.n	800155e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_SPI_Transmit+0x17e>
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d140      	bne.n	8001554 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	330c      	adds	r3, #12
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80014f8:	e02c      	b.n	8001554 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b02      	cmp	r3, #2
 8001506:	d113      	bne.n	8001530 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	330c      	adds	r3, #12
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001524:	b29b      	uxth	r3, r3
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	86da      	strh	r2, [r3, #54]	; 0x36
 800152e:	e011      	b.n	8001554 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001530:	f7ff f830 	bl	8000594 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d803      	bhi.n	8001548 <HAL_SPI_Transmit+0x1f4>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d102      	bne.n	800154e <HAL_SPI_Transmit+0x1fa>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001552:	e026      	b.n	80015a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001558:	b29b      	uxth	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1cd      	bne.n	80014fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	6839      	ldr	r1, [r7, #0]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f894 	bl	8001690 <SPI_EndRxTxTransaction>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2220      	movs	r2, #32
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10a      	bne.n	8001592 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	e000      	b.n	80015a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80015a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80015cc:	e04c      	b.n	8001668 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d048      	beq.n	8001668 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80015d6:	f7fe ffdd 	bl	8000594 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d902      	bls.n	80015ec <SPI_WaitFlagStateUntilTimeout+0x30>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d13d      	bne.n	8001668 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80015fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001604:	d111      	bne.n	800162a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800160e:	d004      	beq.n	800161a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001618:	d107      	bne.n	800162a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001632:	d10f      	bne.n	8001654 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e00f      	b.n	8001688 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4013      	ands	r3, r2
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	429a      	cmp	r2, r3
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	429a      	cmp	r2, r3
 8001684:	d1a3      	bne.n	80015ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <SPI_EndRxTxTransaction+0x7c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <SPI_EndRxTxTransaction+0x80>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0d5b      	lsrs	r3, r3, #21
 80016a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ba:	d112      	bne.n	80016e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2200      	movs	r2, #0
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff ff78 	bl	80015bc <SPI_WaitFlagStateUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d016      	beq.n	8001700 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0220 	orr.w	r2, r3, #32
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e00f      	b.n	8001702 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f8:	2b80      	cmp	r3, #128	; 0x80
 80016fa:	d0f2      	beq.n	80016e2 <SPI_EndRxTxTransaction+0x52>
 80016fc:	e000      	b.n	8001700 <SPI_EndRxTxTransaction+0x70>
        break;
 80016fe:	bf00      	nop
  }

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008
 8001710:	165e9f81 	.word	0x165e9f81

08001714 <delay_initialize>:
#include "delay.h"
#include "stm32f4xx_hal.h"


void delay_initialize(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	// Enable counter
	DWT->CTRL |= 1;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <delay_initialize+0x20>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <delay_initialize+0x20>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]
	// Reset counter
	DWT->CYCCNT = 0;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <delay_initialize+0x20>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e0001000 	.word	0xe0001000

08001738 <__delay_us>:

void __delay_us(uint32_t delay)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * delay;
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <__delay_us+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <__delay_us+0x44>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9a      	lsrs	r2, r3, #18
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	60fb      	str	r3, [r7, #12]
	uint32_t start = DWT->CYCCNT;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <__delay_us+0x48>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60bb      	str	r3, [r7, #8]

	// Delay
	while (DWT->CYCCNT - start < cycles);
 800175a:	bf00      	nop
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <__delay_us+0x48>)
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	429a      	cmp	r2, r3
 8001768:	d8f8      	bhi.n	800175c <__delay_us+0x24>
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	431bde83 	.word	0x431bde83
 8001780:	e0001000 	.word	0xe0001000

08001784 <ssd1322_write_data>:
/**
 * Section: Module APIs
 */

void ssd1322_write_data(uint8_t data)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
    DATA_COMMAND_HIGH();
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <ssd1322_write_data+0x3c>)
 8001790:	2202      	movs	r2, #2
 8001792:	619a      	str	r2, [r3, #24]
    CHIP_SELECT_LOW();
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <ssd1322_write_data+0x3c>)
 8001796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800179a:	619a      	str	r2, [r3, #24]
    // Write data
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 800179c:	1df9      	adds	r1, r7, #7
 800179e:	2301      	movs	r3, #1
 80017a0:	2201      	movs	r2, #1
 80017a2:	4808      	ldr	r0, [pc, #32]	; (80017c4 <ssd1322_write_data+0x40>)
 80017a4:	f7ff fdd6 	bl	8001354 <HAL_SPI_Transmit>
    CHIP_SELECT_HIGH();
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <ssd1322_write_data+0x3c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	619a      	str	r2, [r3, #24]
    DATA_COMMAND_LOW();
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <ssd1322_write_data+0x3c>)
 80017b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b4:	619a      	str	r2, [r3, #24]
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020000 	.word	0x40020000
 80017c4:	200000a0 	.word	0x200000a0

080017c8 <ssd1322_write_command>:

void ssd1322_write_command(uint8_t command)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
    DATA_COMMAND_LOW();
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <ssd1322_write_command+0x3c>)
 80017d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d8:	619a      	str	r2, [r3, #24]
    CHIP_SELECT_LOW();
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <ssd1322_write_command+0x3c>)
 80017dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017e0:	619a      	str	r2, [r3, #24]
    // Write command
    HAL_SPI_Transmit(&hspi1, &command, 1, 1);
 80017e2:	1df9      	adds	r1, r7, #7
 80017e4:	2301      	movs	r3, #1
 80017e6:	2201      	movs	r2, #1
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <ssd1322_write_command+0x40>)
 80017ea:	f7ff fdb3 	bl	8001354 <HAL_SPI_Transmit>
    CHIP_SELECT_HIGH();
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <ssd1322_write_command+0x3c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	619a      	str	r2, [r3, #24]
    DATA_COMMAND_HIGH();
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <ssd1322_write_command+0x3c>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020000 	.word	0x40020000
 8001808:	200000a0 	.word	0x200000a0

0800180c <ssd1322_set_column_address>:

void ssd1322_set_column_address(uint8_t column_start, uint8_t column_end)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
    ssd1322_write_command(SET_COLUMN_ADDRESS);
 800181c:	2015      	movs	r0, #21
 800181e:	f7ff ffd3 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(column_start);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ffad 	bl	8001784 <ssd1322_write_data>
    ssd1322_write_data(column_end);
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ffa9 	bl	8001784 <ssd1322_write_data>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <ssd1322_set_row_address>:

void ssd1322_set_row_address(uint8_t row_start, uint8_t row_end)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	460a      	mov	r2, r1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	4613      	mov	r3, r2
 8001848:	71bb      	strb	r3, [r7, #6]
    ssd1322_write_command(SET_ROW_ADDRESS);
 800184a:	2075      	movs	r0, #117	; 0x75
 800184c:	f7ff ffbc 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(row_start);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff96 	bl	8001784 <ssd1322_write_data>
    ssd1322_write_data(row_end);
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff92 	bl	8001784 <ssd1322_write_data>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <ssd1322_write_ram_enable>:

void ssd1322_write_ram_enable(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
    // Enable MCU to write into RAM
    ssd1322_write_command(WRITE_RAM);
 800186c:	205c      	movs	r0, #92	; 0x5c
 800186e:	f7ff ffab 	bl	80017c8 <ssd1322_write_command>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <ssd1322_set_remap_format>:

static inline void ssd1322_set_remap_format(uint8_t format)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
    // Set Re-Map/Dual COM line mode
    ssd1322_write_command(SET_REMAP_DUAL_COM_LINE_MODE);
 8001880:	20a0      	movs	r0, #160	; 0xa0
 8001882:	f7ff ffa1 	bl	80017c8 <ssd1322_write_command>
    // Default => 0x40
    ssd1322_write_data(format);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff7b 	bl	8001784 <ssd1322_write_data>
    // Default => 0x01 (Disable dual COM mode)
    ssd1322_write_data(0x11);
 800188e:	2011      	movs	r0, #17
 8001890:	f7ff ff78 	bl	8001784 <ssd1322_write_data>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <ssd1322_set_start_line>:

void ssd1322_set_start_line(uint8_t start_line)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
    // Set vertical scroll by RAM
    ssd1322_write_command(SET_DISPLAY_START_LINE);
 80018a6:	20a1      	movs	r0, #161	; 0xa1
 80018a8:	f7ff ff8e 	bl	80017c8 <ssd1322_write_command>
    //Default => 0x00
    ssd1322_write_data(start_line);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff68 	bl	8001784 <ssd1322_write_data>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <ssd1322_set_display_offset>:

static inline void ssd1322_set_display_offset(uint8_t offset)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
    // Set vertical scroll by ROW
    ssd1322_write_command(SET_DISPLAY_OFFSET);
 80018c6:	20a2      	movs	r0, #162	; 0xa2
 80018c8:	f7ff ff7e 	bl	80017c8 <ssd1322_write_command>
    // Default => 0x00
    ssd1322_write_data(offset);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff58 	bl	8001784 <ssd1322_write_data>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <ssd1322_set_display_mode>:

static inline void ssd1322_set_display_mode(uint8_t display_mode)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_DISPLAY_MODE_MASK | display_mode);
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f063 035b 	orn	r3, r3, #91	; 0x5b
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff6a 	bl	80017c8 <ssd1322_write_command>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ssd1322_set_partial_display>:

static inline void ssd1322_set_partial_display(uint8_t partial_mode,
                                               uint8_t row_address_start,
                                               uint8_t row_address_end)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	460b      	mov	r3, r1
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	717b      	strb	r3, [r7, #5]
    ssd1322_write_command(PARTIAL_DISPLAY_MASK | partial_mode);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff56 	bl	80017c8 <ssd1322_write_command>

    if (partial_mode == ENABLE_PARTIAL_DISPLAY)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <ssd1322_set_partial_display+0x36>
    {
        ssd1322_write_data(row_address_start);
 8001922:	79bb      	ldrb	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff2d 	bl	8001784 <ssd1322_write_data>
        ssd1322_write_data(row_address_end);
 800192a:	797b      	ldrb	r3, [r7, #5]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff29 	bl	8001784 <ssd1322_write_data>
    }
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ssd1322_set_function_selection>:

static inline void ssd1322_set_function_selection(uint8_t function)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_FUNCTION_SELECTION);
 8001944:	20ab      	movs	r0, #171	; 0xab
 8001946:	f7ff ff3f 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(function);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff19 	bl	8001784 <ssd1322_write_data>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <ssd1322_set_display_on_off>:

void ssd1322_set_display_on_off(uint8_t display_on_off)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(DISPLAY_ON_OFF_MASK | display_on_off);
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f063 0351 	orn	r3, r3, #81	; 0x51
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff2b 	bl	80017c8 <ssd1322_write_command>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <ssd1322_set_phase_length>:

static inline void ssd1322_set_phase_length(uint8_t phase_length)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_PHASE_LENGTH);
 8001984:	20b1      	movs	r0, #177	; 0xb1
 8001986:	f7ff ff1f 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(phase_length);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fef9 	bl	8001784 <ssd1322_write_data>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <ssd1322_set_display_clock>:

static inline void ssd1322_set_display_clock(uint8_t display_clock)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_FRONT_CLOCK_DIVIDER);
 80019a4:	20b3      	movs	r0, #179	; 0xb3
 80019a6:	f7ff ff0f 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(display_clock);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fee9 	bl	8001784 <ssd1322_write_data>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <ssd1322_set_display_enhancement_a>:

static inline void ssd1322_set_display_enhancement_a(uint8_t vsl,
        uint8_t gray_scale_quality)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	460a      	mov	r2, r1
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	4613      	mov	r3, r2
 80019c8:	71bb      	strb	r3, [r7, #6]
    ssd1322_write_command(DISPLAY_ENHANCEMENT_A);
 80019ca:	20b4      	movs	r0, #180	; 0xb4
 80019cc:	f7ff fefc 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(0xA0 | vsl);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fed3 	bl	8001784 <ssd1322_write_data>
    ssd1322_write_data(0x05 | gray_scale_quality);
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	f043 0305 	orr.w	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fecc 	bl	8001784 <ssd1322_write_data>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <ssd1322_set_gpio>:

static inline void ssd1322_set_gpio(uint8_t gpio_mode)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_GPIO);
 80019fe:	20b5      	movs	r0, #181	; 0xb5
 8001a00:	f7ff fee2 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(gpio_mode);
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff febc 	bl	8001784 <ssd1322_write_data>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <ssd1322_set_precharge_period>:
static inline void ssd1322_set_precharge_period(uint8_t precharge_period)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_SECOND_PRECHARGE_PERIOD);
 8001a1e:	20b6      	movs	r0, #182	; 0xb6
 8001a20:	f7ff fed2 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(precharge_period);
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff feac 	bl	8001784 <ssd1322_write_data>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <ssd1322_set_precharge_voltage>:

static inline void ssd1322_set_precharge_voltage(uint8_t precharge_voltage)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_PRECHARGE_VOLTAGE);
 8001a3e:	20bb      	movs	r0, #187	; 0xbb
 8001a40:	f7ff fec2 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(precharge_voltage);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fe9c 	bl	8001784 <ssd1322_write_data>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <ssd1322_set_vcomh>:

static inline void ssd1322_set_vcomh(uint8_t vcomh_value)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_VCOMH_VOLTAGE);
 8001a5e:	20be      	movs	r0, #190	; 0xbe
 8001a60:	f7ff feb2 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(vcomh_value);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe8c 	bl	8001784 <ssd1322_write_data>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <ssd1322_set_contrast_current>:

static inline void ssd1322_set_contrast_current(uint8_t contrast_current)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_CONTRAST_CURRENT);
 8001a7e:	20c1      	movs	r0, #193	; 0xc1
 8001a80:	f7ff fea2 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(contrast_current);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe7c 	bl	8001784 <ssd1322_write_data>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ssd1322_set_master_current>:

static inline void ssd1322_set_master_current(uint8_t master_current)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(MASTER_CURRENT_CONTROL);
 8001a9e:	20c7      	movs	r0, #199	; 0xc7
 8001aa0:	f7ff fe92 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(master_current);
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fe6c 	bl	8001784 <ssd1322_write_data>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <ssd1322_set_multiplex_ratio>:

static inline void ssd1322_set_multiplex_ratio(uint8_t multiplex_ratio)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_MULTIPLEX_RATIO);
 8001abe:	20ca      	movs	r0, #202	; 0xca
 8001ac0:	f7ff fe82 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(multiplex_ratio);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fe5c 	bl	8001784 <ssd1322_write_data>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <ssd1322_set_display_enhancement_b>:

static inline void ssd1322_set_display_enhancement_b(uint8_t display_enhancement_b)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(DISPLAY_ENHANCEMENT_B);
 8001ade:	20d1      	movs	r0, #209	; 0xd1
 8001ae0:	f7ff fe72 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(0x82 | display_enhancement_b);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f063 037d 	orn	r3, r3, #125	; 0x7d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fe49 	bl	8001784 <ssd1322_write_data>
    ssd1322_write_data(0x20);
 8001af2:	2020      	movs	r0, #32
 8001af4:	f7ff fe46 	bl	8001784 <ssd1322_write_data>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ssd1322_set_linear_gray_scale_table>:

static inline void ssd1322_set_linear_gray_scale_table(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
    ssd1322_write_command(SELECT_DEFAULT_LINEAR_GRAY_SCALE_TABLE);
 8001b04:	20b9      	movs	r0, #185	; 0xb9
 8001b06:	f7ff fe5f 	bl	80017c8 <ssd1322_write_command>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <ssd1322_set_command_lock>:

static inline void ssd1322_set_command_lock(uint8_t command_lock)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
    ssd1322_write_command(SET_COMMAND_LOCK);
 8001b18:	20fd      	movs	r0, #253	; 0xfd
 8001b1a:	f7ff fe55 	bl	80017c8 <ssd1322_write_command>
    ssd1322_write_data(0x12 | command_lock);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f043 0312 	orr.w	r3, r3, #18
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe2c 	bl	8001784 <ssd1322_write_data>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <ssd1322_fill_ram>:

void ssd1322_fill_ram(uint8_t data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint8_t j;

    ssd1322_set_column_address(0x00, 0x77);
 8001b3e:	2177      	movs	r1, #119	; 0x77
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fe63 	bl	800180c <ssd1322_set_column_address>
    ssd1322_set_row_address(0x00, 0x7F);
 8001b46:	217f      	movs	r1, #127	; 0x7f
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fe76 	bl	800183a <ssd1322_set_row_address>
    ssd1322_write_ram_enable();
 8001b4e:	f7ff fe8b 	bl	8001868 <ssd1322_write_ram_enable>

    for (i = 0; i < DISPLAY_HEIGHT; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e00f      	b.n	8001b78 <ssd1322_fill_ram+0x44>
    {
        for (j = 0; j < DISPLAY_WIDTH; j++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73bb      	strb	r3, [r7, #14]
 8001b5c:	e006      	b.n	8001b6c <ssd1322_fill_ram+0x38>
        {
            ssd1322_write_data(data);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe0f 	bl	8001784 <ssd1322_write_data>
        for (j = 0; j < DISPLAY_WIDTH; j++)
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73bb      	strb	r3, [r7, #14]
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	2bef      	cmp	r3, #239	; 0xef
 8001b70:	d9f5      	bls.n	8001b5e <ssd1322_fill_ram+0x2a>
    for (i = 0; i < DISPLAY_HEIGHT; i++)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	daeb      	bge.n	8001b58 <ssd1322_fill_ram+0x24>
        }
    }
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <ssd1322_initialize>:

void ssd1322_initialize(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
    // Initialize DWT delay
    delay_initialize();
 8001b8c:	f7ff fdc2 	bl	8001714 <delay_initialize>

    // SSD1322 Power on sequence
    CHIP_RESET_LOW();
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <ssd1322_initialize+0xb8>)
 8001b92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b96:	619a      	str	r2, [r3, #24]
    delay_ms(500);
 8001b98:	482a      	ldr	r0, [pc, #168]	; (8001c44 <ssd1322_initialize+0xbc>)
 8001b9a:	f7ff fdcd 	bl	8001738 <__delay_us>
    CHIP_RESET_HIGH();
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <ssd1322_initialize+0xb8>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	619a      	str	r2, [r3, #24]
    delay_ms(1000);
 8001ba4:	4828      	ldr	r0, [pc, #160]	; (8001c48 <ssd1322_initialize+0xc0>)
 8001ba6:	f7ff fdc7 	bl	8001738 <__delay_us>

    // Initialization sequence
    ssd1322_set_command_lock(COMMANDS_UNLOCK);
 8001baa:	2012      	movs	r0, #18
 8001bac:	f7ff ffaf 	bl	8001b0e <ssd1322_set_command_lock>
    ssd1322_set_display_on_off(DISPLAY_OFF);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fed2 	bl	800195a <ssd1322_set_display_on_off>
    ssd1322_set_column_address(0x1C, 0x5B);
 8001bb6:	215b      	movs	r1, #91	; 0x5b
 8001bb8:	201c      	movs	r0, #28
 8001bba:	f7ff fe27 	bl	800180c <ssd1322_set_column_address>
    ssd1322_set_row_address(0x00, 0x3F);
 8001bbe:	213f      	movs	r1, #63	; 0x3f
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fe3a 	bl	800183a <ssd1322_set_row_address>
    // Set clock at 80 frames per second
    ssd1322_set_display_clock(0xF1);
 8001bc6:	20f1      	movs	r0, #241	; 0xf1
 8001bc8:	f7ff fee7 	bl	800199a <ssd1322_set_display_clock>
    // Set multiplex ratio to 1/64
    ssd1322_set_multiplex_ratio(0x3F);
 8001bcc:	203f      	movs	r0, #63	; 0x3f
 8001bce:	f7ff ff71 	bl	8001ab4 <ssd1322_set_multiplex_ratio>
    ssd1322_set_display_offset(0x00);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fe72 	bl	80018bc <ssd1322_set_display_offset>
    ssd1322_set_start_line(0x00);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fe5f 	bl	800189c <ssd1322_set_start_line>
    // Column address 0 mapped to SEG0
    // Disable nibble remap
    // Scan from COM[N-1] to C0M0
    // Disable COM split between odd and even
    // Enable dual COM line mode
    ssd1322_set_remap_format(0x14);
 8001bde:	2014      	movs	r0, #20
 8001be0:	f7ff fe49 	bl	8001876 <ssd1322_set_remap_format>
    // Disable GPIO pins input
    ssd1322_set_gpio(0x00);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff ff05 	bl	80019f4 <ssd1322_set_gpio>
    // Enable internal VDD regulator
    ssd1322_set_function_selection(0x01);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff fea5 	bl	800193a <ssd1322_set_function_selection>
    // Enable external VSL
    ssd1322_set_display_enhancement_a(ENABLE_EXTERNAL_VSL,
 8001bf0:	21f8      	movs	r1, #248	; 0xf8
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff fee1 	bl	80019ba <ssd1322_set_display_enhancement_a>
                                      ENHANCED_LOW_GRAY_SCALE_QUALITY);
    // Set segment output current
    ssd1322_set_contrast_current(0x9F);
 8001bf8:	209f      	movs	r0, #159	; 0x9f
 8001bfa:	f7ff ff3b 	bl	8001a74 <ssd1322_set_contrast_current>
    // Set scale factor of segment output current control
    ssd1322_set_master_current(0x0F);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f7ff ff48 	bl	8001a94 <ssd1322_set_master_current>
    // Set default linear gray scale table
    ssd1322_set_linear_gray_scale_table();
 8001c04:	f7ff ff7c 	bl	8001b00 <ssd1322_set_linear_gray_scale_table>
    // Set phase 1 as 5 clocks and phase 2 as 14 clocks
    ssd1322_set_phase_length(0xE2);
 8001c08:	20e2      	movs	r0, #226	; 0xe2
 8001c0a:	f7ff feb6 	bl	800197a <ssd1322_set_phase_length>
    // Enhance driving scheme capability
    ssd1322_set_display_enhancement_b(NORMAL_ENHANCEMENT);
 8001c0e:	2020      	movs	r0, #32
 8001c10:	f7ff ff60 	bl	8001ad4 <ssd1322_set_display_enhancement_b>
    // Set pre-charge voltage level as 0.60 * VCC
    ssd1322_set_precharge_voltage(0x1F);
 8001c14:	201f      	movs	r0, #31
 8001c16:	f7ff ff0d 	bl	8001a34 <ssd1322_set_precharge_voltage>
    // Set second pre-charge period as 8 clocks
    ssd1322_set_precharge_period(0x08);
 8001c1a:	2008      	movs	r0, #8
 8001c1c:	f7ff fefa 	bl	8001a14 <ssd1322_set_precharge_period>
    // Set common pin deselect voltage as 0.86 * VCC
    ssd1322_set_vcomh(0x07);
 8001c20:	2007      	movs	r0, #7
 8001c22:	f7ff ff17 	bl	8001a54 <ssd1322_set_vcomh>
    // Normal display mode - 0x02
    ssd1322_set_display_mode(0x02);
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff fe58 	bl	80018dc <ssd1322_set_display_mode>
    ssd1322_set_partial_display(DISABLE_PARTIAL_DISPLAY, 0x00, 0x00);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fe63 	bl	80018fc <ssd1322_set_partial_display>
    ssd1322_set_display_on_off(DISPLAY_ON);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff fe8f 	bl	800195a <ssd1322_set_display_on_off>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020000 	.word	0x40020000
 8001c44:	0007a120 	.word	0x0007a120
 8001c48:	000f4240 	.word	0x000f4240

08001c4c <ssd1322_set_address>:

void ssd1322_set_address(uint8_t x, uint8_t y)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	71bb      	strb	r3, [r7, #6]
    // There is a horizontal offset of 28 (pixels start from segment 112)
    ssd1322_set_column_address((x + 0x1C), 0x5B);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	331c      	adds	r3, #28
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	215b      	movs	r1, #91	; 0x5b
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fdd1 	bl	800180c <ssd1322_set_column_address>
    ssd1322_set_row_address(y, 0x3F);
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	213f      	movs	r1, #63	; 0x3f
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fde3 	bl	800183a <ssd1322_set_row_address>
    ssd1322_write_ram_enable();
 8001c74:	f7ff fdf8 	bl	8001868 <ssd1322_write_ram_enable>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <ssd1322_set_font>:
        }
    }
}

void ssd1322_set_font(const font_t * font)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    // Set active font
    g_active_font = font;
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <ssd1322_set_font+0x1c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000008c 	.word	0x2000008c

08001ca0 <ssd1322_put_horizontal_line_fb>:

void ssd1322_put_horizontal_line_fb(uint8_t * fb,
                                    uint8_t x,
                                    uint8_t y,
                                    uint8_t length)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	70fb      	strb	r3, [r7, #3]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70bb      	strb	r3, [r7, #2]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	707b      	strb	r3, [r7, #1]
    uint8_t i;

    for (i = 0; i < length; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e00c      	b.n	8001cda <ssd1322_put_horizontal_line_fb+0x3a>
    {
        fb[(y * BUFFER_WIDTH) + x + i] = 0xFF;
 8001cc0:	78bb      	ldrb	r3, [r7, #2]
 8001cc2:	01da      	lsls	r2, r3, #7
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	4413      	add	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3ee      	bcc.n	8001cc0 <ssd1322_put_horizontal_line_fb+0x20>
    }
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <ssd1322_put_vertical_line_fb>:
void ssd1322_put_vertical_line_fb(uint8_t * fb,
                                  uint8_t x,
                                  uint8_t y,
                                  uint8_t height,
                                  uint8_t align)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	4608      	mov	r0, r1
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	70fb      	strb	r3, [r7, #3]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70bb      	strb	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
    uint8_t i;

    if (align == ALIGN_LEFT)
 8001d08:	7e3b      	ldrb	r3, [r7, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d114      	bne.n	8001d38 <ssd1322_put_vertical_line_fb+0x4a>
    {
        for (i = 0; i < height; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e00c      	b.n	8001d2e <ssd1322_put_vertical_line_fb+0x40>
        {
            fb[((y + i) * BUFFER_WIDTH) + x] = 0xF0;
 8001d14:	78ba      	ldrb	r2, [r7, #2]
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4413      	add	r3, r2
 8001d1a:	01da      	lsls	r2, r3, #7
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	4413      	add	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	22f0      	movs	r2, #240	; 0xf0
 8001d26:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < height; i++)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d3ee      	bcc.n	8001d14 <ssd1322_put_vertical_line_fb+0x26>
        for (i = 0; i < height; i++)
        {
            fb[((y + i) * BUFFER_WIDTH + x)] = 0x0F;
        }
    }
}
 8001d36:	e016      	b.n	8001d66 <ssd1322_put_vertical_line_fb+0x78>
    else if (align == ALIGN_RIGHT)
 8001d38:	7e3b      	ldrb	r3, [r7, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d113      	bne.n	8001d66 <ssd1322_put_vertical_line_fb+0x78>
        for (i = 0; i < height; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e00c      	b.n	8001d5e <ssd1322_put_vertical_line_fb+0x70>
            fb[((y + i) * BUFFER_WIDTH + x)] = 0x0F;
 8001d44:	78ba      	ldrb	r2, [r7, #2]
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	4413      	add	r3, r2
 8001d4a:	01da      	lsls	r2, r3, #7
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	4413      	add	r3, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	220f      	movs	r2, #15
 8001d56:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < height; i++)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3ee      	bcc.n	8001d44 <ssd1322_put_vertical_line_fb+0x56>
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <ssd1322_put_rectangle_fb>:
void ssd1322_put_rectangle_fb(uint8_t * fb,
                              uint8_t x_1,
                              uint8_t y_1,
                              uint8_t x_2,
                              uint8_t y_2)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af02      	add	r7, sp, #8
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	4608      	mov	r0, r1
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4603      	mov	r3, r0
 8001d82:	70fb      	strb	r3, [r7, #3]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70bb      	strb	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
    ssd1322_put_vertical_line_fb(fb, x_1, y_1, (y_2 - y_1 + 1), ALIGN_LEFT);
 8001d8c:	7c3a      	ldrb	r2, [r7, #16]
 8001d8e:	78bb      	ldrb	r3, [r7, #2]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2d8      	uxtb	r0, r3
 8001d98:	78ba      	ldrb	r2, [r7, #2]
 8001d9a:	78f9      	ldrb	r1, [r7, #3]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4603      	mov	r3, r0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa3 	bl	8001cee <ssd1322_put_vertical_line_fb>
    ssd1322_put_vertical_line_fb(fb, x_2, y_1, (y_2 - y_1 + 1), ALIGN_RIGHT);
 8001da8:	7c3a      	ldrb	r2, [r7, #16]
 8001daa:	78bb      	ldrb	r3, [r7, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2d8      	uxtb	r0, r3
 8001db4:	78ba      	ldrb	r2, [r7, #2]
 8001db6:	7879      	ldrb	r1, [r7, #1]
 8001db8:	2300      	movs	r3, #0
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff95 	bl	8001cee <ssd1322_put_vertical_line_fb>
    ssd1322_put_horizontal_line_fb(fb, x_1, y_1, (x_2 - x_1 + 1));
 8001dc4:	787a      	ldrb	r2, [r7, #1]
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	78ba      	ldrb	r2, [r7, #2]
 8001dd2:	78f9      	ldrb	r1, [r7, #3]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff63 	bl	8001ca0 <ssd1322_put_horizontal_line_fb>
    ssd1322_put_horizontal_line_fb(fb, x_1, y_2, (x_2 - x_1 + 1));
 8001dda:	787a      	ldrb	r2, [r7, #1]
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	7c3a      	ldrb	r2, [r7, #16]
 8001de8:	78f9      	ldrb	r1, [r7, #3]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff58 	bl	8001ca0 <ssd1322_put_horizontal_line_fb>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <ssd1322_put_resource_fb>:
                                uint8_t y,
                                uint8_t rows,
                                uint8_t columns,
                                uint8_t padding,
                                const uint8_t * resource_ptr)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	70fb      	strb	r3, [r7, #3]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70bb      	strb	r3, [r7, #2]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	707b      	strb	r3, [r7, #1]
    // Variables for manipulating bytes
    uint8_t temp_byte 	    = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	72fb      	strb	r3, [r7, #11]
    uint8_t new_pixel_byte 	= 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	72bb      	strb	r3, [r7, #10]
    uint8_t old_pixel_byte 	= 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
    uint8_t j;

    // Ignore pixel padding upon first function call
    static uint8_t previous_padding = NO_PIXEL_PADDING;
    // Temporary padding - for manipulating padding info
    uint8_t temp_padding = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	733b      	strb	r3, [r7, #12]

    // Perform character spacing with "padding compensation"
    if (x == 0 || padding == NO_PIXEL_PADDING)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <ssd1322_put_resource_fb+0x36>
 8001e28:	7f3b      	ldrb	r3, [r7, #28]
 8001e2a:	2b63      	cmp	r3, #99	; 0x63
 8001e2c:	d102      	bne.n	8001e34 <ssd1322_put_resource_fb+0x3c>
    {
        previous_padding = NO_PIXEL_PADDING;
 8001e2e:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001e30:	2263      	movs	r2, #99	; 0x63
 8001e32:	701a      	strb	r2, [r3, #0]
    }

    if (previous_padding == THREE_PIXEL_PADDING)
 8001e34:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d105      	bne.n	8001e48 <ssd1322_put_resource_fb+0x50>
    {
        // Move the x coordinate one step back and create the appearance
        // that the previous_padding was one.
        x--;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	70fb      	strb	r3, [r7, #3]
        previous_padding = ONE_PIXEL_PADDING;
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
    }

    if (previous_padding == ONE_PIXEL_PADDING)
 8001e48:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d151      	bne.n	8001ef4 <ssd1322_put_resource_fb+0xfc>
    {
        // Move to the space just after the previously displayed character
        // prior to shifting incoming pixels. This creates a character
        // spacing of 2 pixels since there is a space of 1 pixel after
        // the previous character (padding of 1).
        x++;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	3301      	adds	r3, #1
 8001e54:	70fb      	strb	r3, [r7, #3]
        // Perform a global shift of incoming pixels by one pixel to the right,
        // hence adding a pixel of spacing to the previous spacing (padding of 1)
        // This automatically increases the padding of the incoming character by one.
        for (i = 0; i < rows; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	73bb      	strb	r3, [r7, #14]
 8001e5a:	e037      	b.n	8001ecc <ssd1322_put_resource_fb+0xd4>
        {
            for (j = 0; j < columns; j++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	737b      	strb	r3, [r7, #13]
 8001e60:	e01f      	b.n	8001ea2 <ssd1322_put_resource_fb+0xaa>
            {
                new_pixel_byte = *resource_ptr++;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	623a      	str	r2, [r7, #32]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	72bb      	strb	r3, [r7, #10]
                temp_byte = ((new_pixel_byte >> 4) & 0x0F) | old_pixel_byte;
 8001e6c:	7abb      	ldrb	r3, [r7, #10]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	b25a      	sxtb	r2, r3
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	72fb      	strb	r3, [r7, #11]
                fb[((y + i) * BUFFER_WIDTH) + x + j] = temp_byte;
 8001e7e:	78ba      	ldrb	r2, [r7, #2]
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	4413      	add	r3, r2
 8001e84:	01da      	lsls	r2, r3, #7
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	441a      	add	r2, r3
 8001e8a:	7b7b      	ldrb	r3, [r7, #13]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	7afa      	ldrb	r2, [r7, #11]
 8001e94:	701a      	strb	r2, [r3, #0]
                old_pixel_byte = (new_pixel_byte << 4) & 0xF0;
 8001e96:	7abb      	ldrb	r3, [r7, #10]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	73fb      	strb	r3, [r7, #15]
            for (j = 0; j < columns; j++)
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	737b      	strb	r3, [r7, #13]
 8001ea2:	7b7a      	ldrb	r2, [r7, #13]
 8001ea4:	7e3b      	ldrb	r3, [r7, #24]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3db      	bcc.n	8001e62 <ssd1322_put_resource_fb+0x6a>
            }

            fb[((y + i) * BUFFER_WIDTH) + x + j] = old_pixel_byte;
 8001eaa:	78ba      	ldrb	r2, [r7, #2]
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	4413      	add	r3, r2
 8001eb0:	01da      	lsls	r2, r3, #7
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	7b7b      	ldrb	r3, [r7, #13]
 8001eb8:	4413      	add	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
            old_pixel_byte = 0x00;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
        for (i = 0; i < rows; i++)
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	73bb      	strb	r3, [r7, #14]
 8001ecc:	7bba      	ldrb	r2, [r7, #14]
 8001ece:	787b      	ldrb	r3, [r7, #1]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d3c3      	bcc.n	8001e5c <ssd1322_put_resource_fb+0x64>
        }

        x += columns;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	7e3b      	ldrb	r3, [r7, #24]
 8001ed8:	4413      	add	r3, r2
 8001eda:	70fb      	strb	r3, [r7, #3]
        // Increase padding due to the global shift of incoming character
        // pixels to the right.
        temp_padding = padding++;
 8001edc:	7f3b      	ldrb	r3, [r7, #28]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	773a      	strb	r2, [r7, #28]
 8001ee2:	733b      	strb	r3, [r7, #12]
        // Padding should not be allowed to exceed 3
        if (temp_padding > 3)
 8001ee4:	7b3b      	ldrb	r3, [r7, #12]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d904      	bls.n	8001ef4 <ssd1322_put_resource_fb+0xfc>
        {
            // Padding immediately greater than 3 is 4
            // Move x coordinate two steps back to make it look like
            // a padding of 0 was added to current character
            x -= 2;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	3b02      	subs	r3, #2
 8001eee:	70fb      	strb	r3, [r7, #3]
            temp_padding = ZERO_PIXEL_PADDING;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	733b      	strb	r3, [r7, #12]
        }
    }

    if (previous_padding == TWO_PIXEL_PADDING)
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d105      	bne.n	8001f08 <ssd1322_put_resource_fb+0x110>
    {
        // Display character right after the previous character since there is
        // a spacing of 2 pixels after the previous character (padding of 2)
        x++;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	3301      	adds	r3, #1
 8001f00:	70fb      	strb	r3, [r7, #3]
        previous_padding = NO_PIXEL_PADDING;
 8001f02:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001f04:	2263      	movs	r2, #99	; 0x63
 8001f06:	701a      	strb	r2, [r3, #0]
    }

    if (previous_padding == ZERO_PIXEL_PADDING)
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <ssd1322_put_resource_fb+0x124>
    {
        // Leave a space of 1 byte (2 pixels) after the previously displayed
        // character since there is no space after the character (padding of 0)
        x += 2;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	3302      	adds	r3, #2
 8001f14:	70fb      	strb	r3, [r7, #3]
        previous_padding = NO_PIXEL_PADDING;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001f18:	2263      	movs	r2, #99	; 0x63
 8001f1a:	701a      	strb	r2, [r3, #0]
    }

    if (previous_padding == NO_PIXEL_PADDING)
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b63      	cmp	r3, #99	; 0x63
 8001f22:	d12a      	bne.n	8001f7a <ssd1322_put_resource_fb+0x182>
    {
        // Display incoming pixels at the current x coordinate
        for (i = 0; i < rows; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	73bb      	strb	r3, [r7, #14]
 8001f28:	e01b      	b.n	8001f62 <ssd1322_put_resource_fb+0x16a>
        {
            for (j = 0; j < columns; j++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	737b      	strb	r3, [r7, #13]
 8001f2e:	e011      	b.n	8001f54 <ssd1322_put_resource_fb+0x15c>
            {
                fb[((y + i) * BUFFER_WIDTH) + x + j] = *resource_ptr++;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	623a      	str	r2, [r7, #32]
 8001f36:	78b9      	ldrb	r1, [r7, #2]
 8001f38:	7bba      	ldrb	r2, [r7, #14]
 8001f3a:	440a      	add	r2, r1
 8001f3c:	01d1      	lsls	r1, r2, #7
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	4411      	add	r1, r2
 8001f42:	7b7a      	ldrb	r2, [r7, #13]
 8001f44:	440a      	add	r2, r1
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	440a      	add	r2, r1
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	7013      	strb	r3, [r2, #0]
            for (j = 0; j < columns; j++)
 8001f4e:	7b7b      	ldrb	r3, [r7, #13]
 8001f50:	3301      	adds	r3, #1
 8001f52:	737b      	strb	r3, [r7, #13]
 8001f54:	7b7a      	ldrb	r2, [r7, #13]
 8001f56:	7e3b      	ldrb	r3, [r7, #24]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d3e9      	bcc.n	8001f30 <ssd1322_put_resource_fb+0x138>
        for (i = 0; i < rows; i++)
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	73bb      	strb	r3, [r7, #14]
 8001f62:	7bba      	ldrb	r2, [r7, #14]
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3df      	bcc.n	8001f2a <ssd1322_put_resource_fb+0x132>
            }
        }

        x += columns - 1;
 8001f6a:	7e3a      	ldrb	r2, [r7, #24]
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	4413      	add	r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	70fb      	strb	r3, [r7, #3]
        temp_padding = padding;
 8001f76:	7f3b      	ldrb	r3, [r7, #28]
 8001f78:	733b      	strb	r3, [r7, #12]
    }

    // Update previous padding
    previous_padding = temp_padding;
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <ssd1322_put_resource_fb+0x198>)
 8001f7c:	7b3b      	ldrb	r3, [r7, #12]
 8001f7e:	7013      	strb	r3, [r2, #0]

    // Return the current x coordinate of the frame buffer
    return x;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000005 	.word	0x20000005

08001f94 <ssd1322_put_bitmap_fb>:

uint8_t ssd1322_put_bitmap_fb(uint8_t * fb,
                              uint8_t x,
                              uint8_t y,
                              const bitmap_t * bmp)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	72fb      	strb	r3, [r7, #11]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	72bb      	strb	r3, [r7, #10]
    // Display bitmap
    x = ssd1322_put_resource_fb(fb, x, y, bmp->height, (bmp->width * 2), \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	795c      	ldrb	r4, [r3, #5]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	791b      	ldrb	r3, [r3, #4]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	7ab8      	ldrb	r0, [r7, #10]
 8001fb8:	7af9      	ldrb	r1, [r7, #11]
 8001fba:	9202      	str	r2, [sp, #8]
 8001fbc:	2263      	movs	r2, #99	; 0x63
 8001fbe:	9201      	str	r2, [sp, #4]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff ff16 	bl	8001df8 <ssd1322_put_resource_fb>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	72fb      	strb	r3, [r7, #11]
                                NO_PIXEL_PADDING, bmp->address);

    // Return the current x coordinate of the frame buffer
    return x;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
	...

08001fdc <ssd1322_put_char_fb>:

uint8_t ssd1322_put_char_fb(uint8_t * fb, uint8_t x, uint8_t y, const char c)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	70fb      	strb	r3, [r7, #3]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70bb      	strb	r3, [r7, #2]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	707b      	strb	r3, [r7, #1]
    // Fetch glyph metadata
    uint16_t glyph_offset  = g_active_font->font_table[c - ' '].glyph_location;
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <ssd1322_put_char_fb+0xd4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	787a      	ldrb	r2, [r7, #1]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	3bc0      	subs	r3, #192	; 0xc0
 8002008:	440b      	add	r3, r1
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	82fb      	strh	r3, [r7, #22]
    uint8_t  columns       = g_active_font->font_table[c - ' '].glyph_width;
 800200e:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <ssd1322_put_char_fb+0xd4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	787a      	ldrb	r2, [r7, #1]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	3bc0      	subs	r3, #192	; 0xc0
 8002020:	440b      	add	r3, r1
 8002022:	789b      	ldrb	r3, [r3, #2]
 8002024:	757b      	strb	r3, [r7, #21]
    uint8_t  rows          = g_active_font->font_table[c - ' '].glyph_height;
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <ssd1322_put_char_fb+0xd4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	787a      	ldrb	r2, [r7, #1]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	3bc0      	subs	r3, #192	; 0xc0
 8002038:	440b      	add	r3, r1
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	753b      	strb	r3, [r7, #20]
    uint8_t  baseline      = g_active_font->font_table[c - ' '].glyph_baseline;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <ssd1322_put_char_fb+0xd4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	787a      	ldrb	r2, [r7, #1]
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	3bc0      	subs	r3, #192	; 0xc0
 8002050:	440b      	add	r3, r1
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	74fb      	strb	r3, [r7, #19]
    uint8_t  padding       = g_active_font->font_table[c - ' '].dummy_added;
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <ssd1322_put_char_fb+0xd4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	787a      	ldrb	r2, [r7, #1]
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	3bc0      	subs	r3, #192	; 0xc0
 8002068:	440b      	add	r3, r1
 800206a:	795b      	ldrb	r3, [r3, #5]
 800206c:	74bb      	strb	r3, [r7, #18]

    // Get location of glyph in font
    const uint8_t * glyph_address = g_active_font->address + glyph_offset;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <ssd1322_put_char_fb+0xd4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	8afb      	ldrh	r3, [r7, #22]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    // Calculate correct glyph baseline
    y += baseline;
 800207a:	78ba      	ldrb	r2, [r7, #2]
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	4413      	add	r3, r2
 8002080:	70bb      	strb	r3, [r7, #2]
    // Display glyph
    x = ssd1322_put_resource_fb(fb, x, y, rows, (columns * 2), \
 8002082:	7d7b      	ldrb	r3, [r7, #21]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	7d3c      	ldrb	r4, [r7, #20]
 800208a:	78b8      	ldrb	r0, [r7, #2]
 800208c:	78f9      	ldrb	r1, [r7, #3]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	9202      	str	r2, [sp, #8]
 8002092:	7cba      	ldrb	r2, [r7, #18]
 8002094:	9201      	str	r2, [sp, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4623      	mov	r3, r4
 800209a:	4602      	mov	r2, r0
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff feab 	bl	8001df8 <ssd1322_put_resource_fb>
 80020a2:	4603      	mov	r3, r0
 80020a4:	70fb      	strb	r3, [r7, #3]
                                padding, glyph_address);

    // Return the current x coordinate of the frame buffer
    return x;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}
 80020b0:	2000008c 	.word	0x2000008c

080020b4 <ssd1322_put_string_fb>:

uint8_t ssd1322_put_string_fb(uint8_t * fb,
                              uint8_t x,
                              uint8_t y,
                              const char * string)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	72fb      	strb	r3, [r7, #11]
 80020c2:	4613      	mov	r3, r2
 80020c4:	72bb      	strb	r3, [r7, #10]
    while (*string)
 80020c6:	e00a      	b.n	80020de <ssd1322_put_string_fb+0x2a>
    {
        x = ssd1322_put_char_fb(fb, x, y, *string++);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	7aba      	ldrb	r2, [r7, #10]
 80020d2:	7af9      	ldrb	r1, [r7, #11]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff ff81 	bl	8001fdc <ssd1322_put_char_fb>
 80020da:	4603      	mov	r3, r0
 80020dc:	72fb      	strb	r3, [r7, #11]
    while (*string)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <ssd1322_put_string_fb+0x14>
    }

    // Return the current x coordinate of the frame buffer
    return x;
 80020e6:	7afb      	ldrb	r3, [r7, #11]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <ssd1322_fill_fb>:

void ssd1322_fill_fb(uint8_t * fb, uint8_t data)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t j;

    for (i = 0; i < BUFFER_HEIGHT; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e014      	b.n	800212c <ssd1322_fill_fb+0x3c>
    {
        for (j = 0; j < BUFFER_WIDTH; j++)
 8002102:	2300      	movs	r3, #0
 8002104:	73bb      	strb	r3, [r7, #14]
 8002106:	e00a      	b.n	800211e <ssd1322_fill_fb+0x2e>
        {
            fb[(i * BUFFER_WIDTH) + j] = data;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	01da      	lsls	r2, r3, #7
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	4413      	add	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < BUFFER_WIDTH; j++)
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	3301      	adds	r3, #1
 800211c:	73bb      	strb	r3, [r7, #14]
 800211e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002122:	2b00      	cmp	r3, #0
 8002124:	daf0      	bge.n	8002108 <ssd1322_fill_fb+0x18>
    for (i = 0; i < BUFFER_HEIGHT; i++)
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	3301      	adds	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b3f      	cmp	r3, #63	; 0x3f
 8002130:	d9e7      	bls.n	8002102 <ssd1322_fill_fb+0x12>
        }
    }
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <ssd1322_display_fb>:

void ssd1322_display_fb(uint8_t * fb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint8_t j;

    ssd1322_set_address(0, 0);
 8002146:	2100      	movs	r1, #0
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fd7f 	bl	8001c4c <ssd1322_set_address>

    for (i = 0; i < BUFFER_HEIGHT; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e016      	b.n	8002182 <ssd1322_display_fb+0x44>
    {
        for (j = 0; j < BUFFER_WIDTH; j++)
 8002154:	2300      	movs	r3, #0
 8002156:	73bb      	strb	r3, [r7, #14]
 8002158:	e00c      	b.n	8002174 <ssd1322_display_fb+0x36>
        {
            ssd1322_write_data(fb[(i * BUFFER_WIDTH) + j]);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	01da      	lsls	r2, r3, #7
 800215e:	7bbb      	ldrb	r3, [r7, #14]
 8002160:	4413      	add	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fb0b 	bl	8001784 <ssd1322_write_data>
        for (j = 0; j < BUFFER_WIDTH; j++)
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	3301      	adds	r3, #1
 8002172:	73bb      	strb	r3, [r7, #14]
 8002174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002178:	2b00      	cmp	r3, #0
 800217a:	daee      	bge.n	800215a <ssd1322_display_fb+0x1c>
    for (i = 0; i < BUFFER_HEIGHT; i++)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	3301      	adds	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b3f      	cmp	r3, #63	; 0x3f
 8002186:	d9e5      	bls.n	8002154 <ssd1322_display_fb+0x16>
        }
    }
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <MX_GPIO_Init+0xa8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a22      	ldr	r2, [pc, #136]	; (8002238 <MX_GPIO_Init+0xa8>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <MX_GPIO_Init+0xa8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <MX_GPIO_Init+0xa8>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <MX_GPIO_Init+0xa8>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <MX_GPIO_Init+0xa8>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80021de:	2200      	movs	r2, #0
 80021e0:	211f      	movs	r1, #31
 80021e2:	4816      	ldr	r0, [pc, #88]	; (800223c <MX_GPIO_Init+0xac>)
 80021e4:	f7fe fc62 	bl	8000aac <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80021ee:	4814      	ldr	r0, [pc, #80]	; (8002240 <MX_GPIO_Init+0xb0>)
 80021f0:	f7fe fc5c 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80021f4:	231f      	movs	r3, #31
 80021f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4619      	mov	r1, r3
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <MX_GPIO_Init+0xac>)
 800220c:	f7fe fab4 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002210:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_GPIO_Init+0xb0>)
 800222a:	f7fe faa5 	bl	8000778 <HAL_GPIO_Init>

}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020c00 	.word	0x40020c00

08002244 <main>:
#include "Lato_Regular.h"
#include "IBMPlexMono_Regular.h"


int main(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af02      	add	r7, sp, #8

    // Reset of all peripherals, Initializes the Flash interface and the Systick.
    HAL_Init();
 800224a:	f7fe f93d 	bl	80004c8 <HAL_Init>
    // Configure the system clock.
    SystemClock_Config();
 800224e:	f000 f89d 	bl	800238c <SystemClock_Config>
    // Initialize all configured peripherals.
    MX_GPIO_Init();
 8002252:	f7ff ff9d 	bl	8002190 <MX_GPIO_Init>
    MX_SPI1_Init();
 8002256:	f000 f8f7 	bl	8002448 <MX_SPI1_Init>

    // Allocate memory for a frame buffer
    uint8_t *frame_buffer = (uint8_t *) calloc(8192, sizeof(uint8_t));
 800225a:	2101      	movs	r1, #1
 800225c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002260:	f000 fa52 	bl	8002708 <calloc>
 8002264:	4603      	mov	r3, r0
 8002266:	607b      	str	r3, [r7, #4]

    delay_initialize();
 8002268:	f7ff fa54 	bl	8001714 <delay_initialize>
    ssd1322_initialize();
 800226c:	f7ff fc8c 	bl	8001b88 <ssd1322_initialize>
    // Clear SSD1322 RAM
    ssd1322_fill_ram(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff fc5f 	bl	8001b34 <ssd1322_fill_ram>

    if (frame_buffer != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d06e      	beq.n	800235a <main+0x116>
    {
        ssd1322_fill_fb(frame_buffer, 0xFF);
 800227c:	21ff      	movs	r1, #255	; 0xff
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ff36 	bl	80020f0 <ssd1322_fill_fb>
        ssd1322_display_fb(frame_buffer);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff5a 	bl	800213e <ssd1322_display_fb>
        delay_ms(40000);
 800228a:	4834      	ldr	r0, [pc, #208]	; (800235c <main+0x118>)
 800228c:	f7ff fa54 	bl	8001738 <__delay_us>
        ssd1322_fill_fb(frame_buffer, 0x00);
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff2c 	bl	80020f0 <ssd1322_fill_fb>
        ssd1322_display_fb(frame_buffer);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff50 	bl	800213e <ssd1322_display_fb>

        ssd1322_put_rectangle_fb(frame_buffer, 0, 0, 127, 63);
 800229e:	233f      	movs	r3, #63	; 0x3f
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	237f      	movs	r3, #127	; 0x7f
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff fd62 	bl	8001d72 <ssd1322_put_rectangle_fb>
        ssd1322_put_rectangle_fb(frame_buffer, 10, 10, 117, 53);
 80022ae:	2335      	movs	r3, #53	; 0x35
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2375      	movs	r3, #117	; 0x75
 80022b4:	220a      	movs	r2, #10
 80022b6:	210a      	movs	r1, #10
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fd5a 	bl	8001d72 <ssd1322_put_rectangle_fb>
        ssd1322_display_fb(frame_buffer);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff3d 	bl	800213e <ssd1322_display_fb>
        delay_ms(20000);
 80022c4:	4826      	ldr	r0, [pc, #152]	; (8002360 <main+0x11c>)
 80022c6:	f7ff fa37 	bl	8001738 <__delay_us>

        // Display images on screen
        ssd1322_fill_fb(frame_buffer, 0x00);
 80022ca:	2100      	movs	r1, #0
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff0f 	bl	80020f0 <ssd1322_fill_fb>
        ssd1322_put_bitmap_fb(frame_buffer, 0,  0, (const bitmap_t *) &einstein_0);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <main+0x120>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff fe5b 	bl	8001f94 <ssd1322_put_bitmap_fb>
        ssd1322_put_bitmap_fb(frame_buffer, 33, 0, (const bitmap_t *) &einstein_1);
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <main+0x124>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	2121      	movs	r1, #33	; 0x21
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fe55 	bl	8001f94 <ssd1322_put_bitmap_fb>
        ssd1322_put_bitmap_fb(frame_buffer, 60, 0, (const bitmap_t *) &einstein_2);
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <main+0x128>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	213c      	movs	r1, #60	; 0x3c
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fe4f 	bl	8001f94 <ssd1322_put_bitmap_fb>
        ssd1322_put_bitmap_fb(frame_buffer, 91, 0, (const bitmap_t *) &einstein_3);
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <main+0x12c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	215b      	movs	r1, #91	; 0x5b
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fe49 	bl	8001f94 <ssd1322_put_bitmap_fb>
        ssd1322_display_fb(frame_buffer);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff1b 	bl	800213e <ssd1322_display_fb>
        delay_ms(20000);
 8002308:	4815      	ldr	r0, [pc, #84]	; (8002360 <main+0x11c>)
 800230a:	f7ff fa15 	bl	8001738 <__delay_us>

        // Display text on screen
        ssd1322_set_font((const font_t *) &PTM55FT);
 800230e:	4819      	ldr	r0, [pc, #100]	; (8002374 <main+0x130>)
 8002310:	f7ff fcb6 	bl	8001c80 <ssd1322_set_font>
        ssd1322_fill_fb(frame_buffer, 0x00);
 8002314:	2100      	movs	r1, #0
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff feea 	bl	80020f0 <ssd1322_fill_fb>
        ssd1322_put_string_fb(frame_buffer, 0, 0,  "SSD1322 OLED Fun:");
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <main+0x134>)
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fec6 	bl	80020b4 <ssd1322_put_string_fb>
        ssd1322_put_string_fb(frame_buffer, 0, 32, "Part Two");
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <main+0x138>)
 800232a:	2220      	movs	r2, #32
 800232c:	2100      	movs	r1, #0
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fec0 	bl	80020b4 <ssd1322_put_string_fb>
        ssd1322_display_fb(frame_buffer);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff02 	bl	800213e <ssd1322_display_fb>
        delay_ms(20000);
 800233a:	4809      	ldr	r0, [pc, #36]	; (8002360 <main+0x11c>)
 800233c:	f7ff f9fc 	bl	8001738 <__delay_us>

        // Display final image on screen
        ssd1322_fill_fb(frame_buffer, 0x00);
 8002340:	2100      	movs	r1, #0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fed4 	bl	80020f0 <ssd1322_fill_fb>
        ssd1322_put_bitmap_fb(frame_buffer, 34, 0, (const bitmap_t *) &CN);
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <main+0x13c>)
 800234a:	2200      	movs	r2, #0
 800234c:	2122      	movs	r1, #34	; 0x22
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fe20 	bl	8001f94 <ssd1322_put_bitmap_fb>
        ssd1322_display_fb(frame_buffer);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fef2 	bl	800213e <ssd1322_display_fb>

    }

    while (1)
 800235a:	e7fe      	b.n	800235a <main+0x116>
 800235c:	02625a00 	.word	0x02625a00
 8002360:	01312d00 	.word	0x01312d00
 8002364:	080080ec 	.word	0x080080ec
 8002368:	080080f4 	.word	0x080080f4
 800236c:	080080fc 	.word	0x080080fc
 8002370:	08008104 	.word	0x08008104
 8002374:	0800560c 	.word	0x0800560c
 8002378:	08002888 	.word	0x08002888
 800237c:	0800289c 	.word	0x0800289c
 8002380:	0800810c 	.word	0x0800810c

08002384 <Error_Handler>:

    }
}

void Error_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
    while (1);
 8002388:	e7fe      	b.n	8002388 <Error_Handler+0x4>
	...

0800238c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b094      	sub	sp, #80	; 0x50
 8002390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	2230      	movs	r2, #48	; 0x30
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f9e6 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <SystemClock_Config+0xb4>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	4a21      	ldr	r2, [pc, #132]	; (8002440 <SystemClock_Config+0xb4>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	6413      	str	r3, [r2, #64]	; 0x40
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <SystemClock_Config+0xb4>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <SystemClock_Config+0xb8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <SystemClock_Config+0xb8>)
 80023d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <SystemClock_Config+0xb8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023e8:	2302      	movs	r3, #2
 80023ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f0:	2310      	movs	r3, #16
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f8:	f107 0320 	add.w	r3, r7, #32
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fb6f 	bl	8000ae0 <HAL_RCC_OscConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002408:	f7ff ffbc 	bl	8002384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240c:	230f      	movs	r3, #15
 800240e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fd9c 	bl	8000f64 <HAL_RCC_ClockConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002432:	f7ff ffa7 	bl	8002384 <Error_Handler>
  }
}
 8002436:	bf00      	nop
 8002438:	3750      	adds	r7, #80	; 0x50
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40007000 	.word	0x40007000

08002448 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <MX_SPI1_Init+0x64>)
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <MX_SPI1_Init+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_SPI1_Init+0x64>)
 8002454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_SPI1_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_SPI1_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_SPI1_Init+0x64>)
 8002474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002478:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_SPI1_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <MX_SPI1_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_SPI1_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <MX_SPI1_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_SPI1_Init+0x64>)
 8002494:	220a      	movs	r2, #10
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002498:	4804      	ldr	r0, [pc, #16]	; (80024ac <MX_SPI1_Init+0x64>)
 800249a:	f7fe fef7 	bl	800128c <HAL_SPI_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024a4:	f7ff ff6e 	bl	8002384 <Error_Handler>
  }

}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200000a0 	.word	0x200000a0
 80024b0:	40013000 	.word	0x40013000

080024b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_SPI_MspInit+0x84>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_SPI_MspInit+0x88>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_SPI_MspInit+0x88>)
 80024e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_SPI_MspInit+0x88>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_SPI_MspInit+0x88>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_SPI_MspInit+0x88>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_SPI_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800250e:	23e0      	movs	r3, #224	; 0xe0
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800251e:	2305      	movs	r3, #5
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 800252a:	f7fe f925 	bl	8000778 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40013000 	.word	0x40013000
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_MspInit+0x4c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_MspInit+0x4c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f7fd ffc0 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x50>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <_sbrk+0x16>
		heap_end = &end;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <_sbrk+0x50>)
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <_sbrk+0x54>)
 8002604:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <_sbrk+0x50>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <_sbrk+0x50>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	466a      	mov	r2, sp
 8002616:	4293      	cmp	r3, r2
 8002618:	d907      	bls.n	800262a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800261a:	f000 f87d 	bl	8002718 <__errno>
 800261e:	4602      	mov	r2, r0
 8002620:	230c      	movs	r3, #12
 8002622:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002624:	f04f 33ff 	mov.w	r3, #4294967295
 8002628:	e006      	b.n	8002638 <_sbrk+0x48>
	}

	heap_end += incr;
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <_sbrk+0x50>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	4a03      	ldr	r2, [pc, #12]	; (8002640 <_sbrk+0x50>)
 8002634:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000090 	.word	0x20000090
 8002644:	20000100 	.word	0x20000100

08002648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <SystemInit+0x60>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <SystemInit+0x60>)
 8002654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <SystemInit+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <SystemInit+0x64>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <SystemInit+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <SystemInit+0x64>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <SystemInit+0x64>)
 8002674:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <SystemInit+0x64>)
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <SystemInit+0x68>)
 8002682:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <SystemInit+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a08      	ldr	r2, [pc, #32]	; (80026ac <SystemInit+0x64>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SystemInit+0x64>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <SystemInit+0x60>)
 8002698:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800269c:	609a      	str	r2, [r3, #8]
#endif
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	24003010 	.word	0x24003010

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
  ldr  r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026de:	f7ff ffb3 	bl	8002648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f000 f81f 	bl	8002724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7ff fdad 	bl	8002244 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026ec:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80026f0:	08008134 	.word	0x08008134
  ldr  r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026f8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80026fc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002700:	200000fc 	.word	0x200000fc

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <calloc>:
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <calloc+0xc>)
 800270a:	460a      	mov	r2, r1
 800270c:	4601      	mov	r1, r0
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	f000 b834 	b.w	800277c <_calloc_r>
 8002714:	2000000c 	.word	0x2000000c

08002718 <__errno>:
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <__errno+0x8>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4e0d      	ldr	r6, [pc, #52]	; (800275c <__libc_init_array+0x38>)
 8002728:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__libc_init_array+0x3c>)
 800272a:	1ba4      	subs	r4, r4, r6
 800272c:	10a4      	asrs	r4, r4, #2
 800272e:	2500      	movs	r5, #0
 8002730:	42a5      	cmp	r5, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	4e0b      	ldr	r6, [pc, #44]	; (8002764 <__libc_init_array+0x40>)
 8002736:	4c0c      	ldr	r4, [pc, #48]	; (8002768 <__libc_init_array+0x44>)
 8002738:	f000 f89a 	bl	8002870 <_init>
 800273c:	1ba4      	subs	r4, r4, r6
 800273e:	10a4      	asrs	r4, r4, #2
 8002740:	2500      	movs	r5, #0
 8002742:	42a5      	cmp	r5, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800274c:	4798      	blx	r3
 800274e:	3501      	adds	r5, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002756:	4798      	blx	r3
 8002758:	3501      	adds	r5, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	0800812c 	.word	0x0800812c
 8002760:	0800812c 	.word	0x0800812c
 8002764:	0800812c 	.word	0x0800812c
 8002768:	08008130 	.word	0x08008130

0800276c <memset>:
 800276c:	4402      	add	r2, r0
 800276e:	4603      	mov	r3, r0
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	f803 1b01 	strb.w	r1, [r3], #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <_calloc_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	fb02 f401 	mul.w	r4, r2, r1
 8002782:	4621      	mov	r1, r4
 8002784:	f000 f808 	bl	8002798 <_malloc_r>
 8002788:	4605      	mov	r5, r0
 800278a:	b118      	cbz	r0, 8002794 <_calloc_r+0x18>
 800278c:	4622      	mov	r2, r4
 800278e:	2100      	movs	r1, #0
 8002790:	f7ff ffec 	bl	800276c <memset>
 8002794:	4628      	mov	r0, r5
 8002796:	bd38      	pop	{r3, r4, r5, pc}

08002798 <_malloc_r>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	1ccd      	adds	r5, r1, #3
 800279c:	f025 0503 	bic.w	r5, r5, #3
 80027a0:	3508      	adds	r5, #8
 80027a2:	2d0c      	cmp	r5, #12
 80027a4:	bf38      	it	cc
 80027a6:	250c      	movcc	r5, #12
 80027a8:	2d00      	cmp	r5, #0
 80027aa:	4606      	mov	r6, r0
 80027ac:	db01      	blt.n	80027b2 <_malloc_r+0x1a>
 80027ae:	42a9      	cmp	r1, r5
 80027b0:	d903      	bls.n	80027ba <_malloc_r+0x22>
 80027b2:	230c      	movs	r3, #12
 80027b4:	6033      	str	r3, [r6, #0]
 80027b6:	2000      	movs	r0, #0
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	f000 f857 	bl	800286c <__malloc_lock>
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <_malloc_r+0xac>)
 80027c0:	6814      	ldr	r4, [r2, #0]
 80027c2:	4621      	mov	r1, r4
 80027c4:	b991      	cbnz	r1, 80027ec <_malloc_r+0x54>
 80027c6:	4c20      	ldr	r4, [pc, #128]	; (8002848 <_malloc_r+0xb0>)
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	b91b      	cbnz	r3, 80027d4 <_malloc_r+0x3c>
 80027cc:	4630      	mov	r0, r6
 80027ce:	f000 f83d 	bl	800284c <_sbrk_r>
 80027d2:	6020      	str	r0, [r4, #0]
 80027d4:	4629      	mov	r1, r5
 80027d6:	4630      	mov	r0, r6
 80027d8:	f000 f838 	bl	800284c <_sbrk_r>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d124      	bne.n	800282a <_malloc_r+0x92>
 80027e0:	230c      	movs	r3, #12
 80027e2:	6033      	str	r3, [r6, #0]
 80027e4:	4630      	mov	r0, r6
 80027e6:	f000 f842 	bl	800286e <__malloc_unlock>
 80027ea:	e7e4      	b.n	80027b6 <_malloc_r+0x1e>
 80027ec:	680b      	ldr	r3, [r1, #0]
 80027ee:	1b5b      	subs	r3, r3, r5
 80027f0:	d418      	bmi.n	8002824 <_malloc_r+0x8c>
 80027f2:	2b0b      	cmp	r3, #11
 80027f4:	d90f      	bls.n	8002816 <_malloc_r+0x7e>
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	50cd      	str	r5, [r1, r3]
 80027fa:	18cc      	adds	r4, r1, r3
 80027fc:	4630      	mov	r0, r6
 80027fe:	f000 f836 	bl	800286e <__malloc_unlock>
 8002802:	f104 000b 	add.w	r0, r4, #11
 8002806:	1d23      	adds	r3, r4, #4
 8002808:	f020 0007 	bic.w	r0, r0, #7
 800280c:	1ac3      	subs	r3, r0, r3
 800280e:	d0d3      	beq.n	80027b8 <_malloc_r+0x20>
 8002810:	425a      	negs	r2, r3
 8002812:	50e2      	str	r2, [r4, r3]
 8002814:	e7d0      	b.n	80027b8 <_malloc_r+0x20>
 8002816:	428c      	cmp	r4, r1
 8002818:	684b      	ldr	r3, [r1, #4]
 800281a:	bf16      	itet	ne
 800281c:	6063      	strne	r3, [r4, #4]
 800281e:	6013      	streq	r3, [r2, #0]
 8002820:	460c      	movne	r4, r1
 8002822:	e7eb      	b.n	80027fc <_malloc_r+0x64>
 8002824:	460c      	mov	r4, r1
 8002826:	6849      	ldr	r1, [r1, #4]
 8002828:	e7cc      	b.n	80027c4 <_malloc_r+0x2c>
 800282a:	1cc4      	adds	r4, r0, #3
 800282c:	f024 0403 	bic.w	r4, r4, #3
 8002830:	42a0      	cmp	r0, r4
 8002832:	d005      	beq.n	8002840 <_malloc_r+0xa8>
 8002834:	1a21      	subs	r1, r4, r0
 8002836:	4630      	mov	r0, r6
 8002838:	f000 f808 	bl	800284c <_sbrk_r>
 800283c:	3001      	adds	r0, #1
 800283e:	d0cf      	beq.n	80027e0 <_malloc_r+0x48>
 8002840:	6025      	str	r5, [r4, #0]
 8002842:	e7db      	b.n	80027fc <_malloc_r+0x64>
 8002844:	20000094 	.word	0x20000094
 8002848:	20000098 	.word	0x20000098

0800284c <_sbrk_r>:
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4c06      	ldr	r4, [pc, #24]	; (8002868 <_sbrk_r+0x1c>)
 8002850:	2300      	movs	r3, #0
 8002852:	4605      	mov	r5, r0
 8002854:	4608      	mov	r0, r1
 8002856:	6023      	str	r3, [r4, #0]
 8002858:	f7ff feca 	bl	80025f0 <_sbrk>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_sbrk_r+0x1a>
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	b103      	cbz	r3, 8002866 <_sbrk_r+0x1a>
 8002864:	602b      	str	r3, [r5, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	200000f8 	.word	0x200000f8

0800286c <__malloc_lock>:
 800286c:	4770      	bx	lr

0800286e <__malloc_unlock>:
 800286e:	4770      	bx	lr

08002870 <_init>:
 8002870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002872:	bf00      	nop
 8002874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002876:	bc08      	pop	{r3}
 8002878:	469e      	mov	lr, r3
 800287a:	4770      	bx	lr

0800287c <_fini>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	bf00      	nop
 8002880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002882:	bc08      	pop	{r3}
 8002884:	469e      	mov	lr, r3
 8002886:	4770      	bx	lr
